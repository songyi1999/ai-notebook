---
description: 开发框架索引
globs: 
alwaysApply: false
---
# AI笔记本项目 - Cursor Rules 索引

## 规则文件概览

本项目包含完整的Cursor Rules规则集，涵盖从项目概览到部署上线的完整开发生命周期。

## 核心规则文件

### 1. [项目概览](mdc:project-overview.mdc)
- 项目简介和核心特性
- 技术架构概览
- 项目文档结构
- 开发阶段说明
- 当前项目状态

### 2. [开发规范](mdc:development-standards.mdc)
- 基本开发原则
- 代码规范和注释要求
- 日志规范
- 文档维护要求
- 测试要求和技术栈
- 配置统一性原则

### 3. [架构设计指导](mdc:architecture-guide.mdc)
- 整体架构原则
- 核心架构决策（缓存、搜索、AI模型管理等）
- 数据库设计概览
- 笔记更新机制
- 混合搜索实现
- 环境变量配置
- 开发指导流程

### 4. [AI集成指导](mdc:ai-integration.mdc)
- Ollama集成方案
- RAG问答系统架构
- OpenAI兼容接口调用
- ChromaDB集成
- 性能优化策略
- 错误处理机制
- 监控和调试工具
- 扩展性设计

### 5. [前端开发指导](mdc:frontend-guide.mdc)
- React + TypeScript技术栈
- 项目结构和组件设计
- 核心组件接口定义
- Zustand状态管理
- API服务模块
- 样式规范和主题设计
- 性能优化策略
- 测试策略

### 6. [后端开发指导](mdc:backend-guide.mdc)
- FastAPI + Python技术栈
- 项目结构和模块设计
- 配置管理
- 数据库模型设计
- API路由设计
- 业务服务层
- AI服务集成
- 数据库操作
- 性能优化
- 错误处理
- 测试策略

### 7. [Docker部署指导](mdc:docker-deployment.mdc)
- 容器化架构
- Docker Compose配置
- Dockerfile配置
- 启动脚本
- 环境配置
- 数据持久化
- 备份和恢复
- 监控和日志
- 部署最佳实践

## 使用指南

### 开发流程建议

1. **项目启动**：先阅读 [项目概览](mdc:project-overview.mdc) 了解项目整体情况
2. **架构理解**：参考 [架构设计指导](mdc:architecture-guide.mdc) 理解技术架构和设计决策
3. **开发规范**：遵循 [开发规范](mdc:development-standards.mdc) 确保代码质量
4. **具体开发**：根据开发任务参考相应的技术指导文件
5. **部署上线**：使用 [Docker部署指导](mdc:docker-deployment.mdc) 进行容器化部署

### 文档引用关系

所有规则文件都包含对核心项目文档的引用：
- [README.md](mdc:README.md) - 项目概况、技术架构、函数列表、变量说明
- [DATABASE.md](mdc:DATABASE.md) - 数据库结构设计
- [开发计划.md](mdc:开发计划.md) - 详细开发计划和技术选型
- [task.log](mdc:task.log) - 项目进度跟踪和决策记录

### 规则更新原则

- 当项目架构或技术栈发生变化时，及时更新相关规则文件
- 新增功能模块时，在相应的指导文件中添加相关内容
- 发现开发过程中的最佳实践时，及时记录到规范文件中
- 保持规则文件与项目实际情况的同步

## 快速查找

- **项目介绍**：[项目概览](mdc:project-overview.mdc)
- **代码规范**：[开发规范](mdc:development-standards.mdc)
- **架构设计**：[架构设计指导](mdc:architecture-guide.mdc)
- **AI功能**：[AI集成指导](mdc:ai-integration.mdc)
- **前端开发**：[前端开发指导](mdc:frontend-guide.mdc)
- **后端开发**：[后端开发指导](mdc:backend-guide.mdc)
- **部署运维**：[Docker部署指导](mdc:docker-deployment.mdc)

